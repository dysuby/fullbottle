// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/share/share.proto

package fullbottle_srv_share

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/vegchic/fullbottle/bottle/proto/bottle"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ShareService service

type ShareService interface {
	// share entrance
	ShareStatus(ctx context.Context, in *ShareStatusRequest, opts ...client.CallOption) (*ShareStatusResponse, error)
	AccessShare(ctx context.Context, in *AccessShareRequest, opts ...client.CallOption) (*AccessShareResponse, error)
	// viewer
	GetShareInfo(ctx context.Context, in *GetShareInfoRequest, opts ...client.CallOption) (*GetShareInfoResponse, error)
	GetShareFolder(ctx context.Context, in *GetShareFolderRequest, opts ...client.CallOption) (*GetShareFolderResponse, error)
	GetShareDownloadUrl(ctx context.Context, in *GetShareDownloadUrlRequest, opts ...client.CallOption) (*GetShareDownloadUrlResponse, error)
	// owner
	CreateShare(ctx context.Context, in *CreateShareRequest, opts ...client.CallOption) (*CreateShareResponse, error)
	UpdateShare(ctx context.Context, in *UpdateShareRequest, opts ...client.CallOption) (*UpdateShareResponse, error)
	CancelShare(ctx context.Context, in *CancelShareRequest, opts ...client.CallOption) (*CancelShareResponse, error)
	RemoveShareEntry(ctx context.Context, in *RemoveShareEntryRequest, opts ...client.CallOption) (*RemoveShareEntryResponse, error)
}

type shareService struct {
	c    client.Client
	name string
}

func NewShareService(name string, c client.Client) ShareService {
	return &shareService{
		c:    c,
		name: name,
	}
}

func (c *shareService) ShareStatus(ctx context.Context, in *ShareStatusRequest, opts ...client.CallOption) (*ShareStatusResponse, error) {
	req := c.c.NewRequest(c.name, "ShareService.ShareStatus", in)
	out := new(ShareStatusResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareService) AccessShare(ctx context.Context, in *AccessShareRequest, opts ...client.CallOption) (*AccessShareResponse, error) {
	req := c.c.NewRequest(c.name, "ShareService.AccessShare", in)
	out := new(AccessShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareService) GetShareInfo(ctx context.Context, in *GetShareInfoRequest, opts ...client.CallOption) (*GetShareInfoResponse, error) {
	req := c.c.NewRequest(c.name, "ShareService.GetShareInfo", in)
	out := new(GetShareInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareService) GetShareFolder(ctx context.Context, in *GetShareFolderRequest, opts ...client.CallOption) (*GetShareFolderResponse, error) {
	req := c.c.NewRequest(c.name, "ShareService.GetShareFolder", in)
	out := new(GetShareFolderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareService) GetShareDownloadUrl(ctx context.Context, in *GetShareDownloadUrlRequest, opts ...client.CallOption) (*GetShareDownloadUrlResponse, error) {
	req := c.c.NewRequest(c.name, "ShareService.GetShareDownloadUrl", in)
	out := new(GetShareDownloadUrlResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareService) CreateShare(ctx context.Context, in *CreateShareRequest, opts ...client.CallOption) (*CreateShareResponse, error) {
	req := c.c.NewRequest(c.name, "ShareService.CreateShare", in)
	out := new(CreateShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareService) UpdateShare(ctx context.Context, in *UpdateShareRequest, opts ...client.CallOption) (*UpdateShareResponse, error) {
	req := c.c.NewRequest(c.name, "ShareService.UpdateShare", in)
	out := new(UpdateShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareService) CancelShare(ctx context.Context, in *CancelShareRequest, opts ...client.CallOption) (*CancelShareResponse, error) {
	req := c.c.NewRequest(c.name, "ShareService.CancelShare", in)
	out := new(CancelShareResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareService) RemoveShareEntry(ctx context.Context, in *RemoveShareEntryRequest, opts ...client.CallOption) (*RemoveShareEntryResponse, error) {
	req := c.c.NewRequest(c.name, "ShareService.RemoveShareEntry", in)
	out := new(RemoveShareEntryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShareService service

type ShareServiceHandler interface {
	// share entrance
	ShareStatus(context.Context, *ShareStatusRequest, *ShareStatusResponse) error
	AccessShare(context.Context, *AccessShareRequest, *AccessShareResponse) error
	// viewer
	GetShareInfo(context.Context, *GetShareInfoRequest, *GetShareInfoResponse) error
	GetShareFolder(context.Context, *GetShareFolderRequest, *GetShareFolderResponse) error
	GetShareDownloadUrl(context.Context, *GetShareDownloadUrlRequest, *GetShareDownloadUrlResponse) error
	// owner
	CreateShare(context.Context, *CreateShareRequest, *CreateShareResponse) error
	UpdateShare(context.Context, *UpdateShareRequest, *UpdateShareResponse) error
	CancelShare(context.Context, *CancelShareRequest, *CancelShareResponse) error
	RemoveShareEntry(context.Context, *RemoveShareEntryRequest, *RemoveShareEntryResponse) error
}

func RegisterShareServiceHandler(s server.Server, hdlr ShareServiceHandler, opts ...server.HandlerOption) error {
	type shareService interface {
		ShareStatus(ctx context.Context, in *ShareStatusRequest, out *ShareStatusResponse) error
		AccessShare(ctx context.Context, in *AccessShareRequest, out *AccessShareResponse) error
		GetShareInfo(ctx context.Context, in *GetShareInfoRequest, out *GetShareInfoResponse) error
		GetShareFolder(ctx context.Context, in *GetShareFolderRequest, out *GetShareFolderResponse) error
		GetShareDownloadUrl(ctx context.Context, in *GetShareDownloadUrlRequest, out *GetShareDownloadUrlResponse) error
		CreateShare(ctx context.Context, in *CreateShareRequest, out *CreateShareResponse) error
		UpdateShare(ctx context.Context, in *UpdateShareRequest, out *UpdateShareResponse) error
		CancelShare(ctx context.Context, in *CancelShareRequest, out *CancelShareResponse) error
		RemoveShareEntry(ctx context.Context, in *RemoveShareEntryRequest, out *RemoveShareEntryResponse) error
	}
	type ShareService struct {
		shareService
	}
	h := &shareServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShareService{h}, opts...))
}

type shareServiceHandler struct {
	ShareServiceHandler
}

func (h *shareServiceHandler) ShareStatus(ctx context.Context, in *ShareStatusRequest, out *ShareStatusResponse) error {
	return h.ShareServiceHandler.ShareStatus(ctx, in, out)
}

func (h *shareServiceHandler) AccessShare(ctx context.Context, in *AccessShareRequest, out *AccessShareResponse) error {
	return h.ShareServiceHandler.AccessShare(ctx, in, out)
}

func (h *shareServiceHandler) GetShareInfo(ctx context.Context, in *GetShareInfoRequest, out *GetShareInfoResponse) error {
	return h.ShareServiceHandler.GetShareInfo(ctx, in, out)
}

func (h *shareServiceHandler) GetShareFolder(ctx context.Context, in *GetShareFolderRequest, out *GetShareFolderResponse) error {
	return h.ShareServiceHandler.GetShareFolder(ctx, in, out)
}

func (h *shareServiceHandler) GetShareDownloadUrl(ctx context.Context, in *GetShareDownloadUrlRequest, out *GetShareDownloadUrlResponse) error {
	return h.ShareServiceHandler.GetShareDownloadUrl(ctx, in, out)
}

func (h *shareServiceHandler) CreateShare(ctx context.Context, in *CreateShareRequest, out *CreateShareResponse) error {
	return h.ShareServiceHandler.CreateShare(ctx, in, out)
}

func (h *shareServiceHandler) UpdateShare(ctx context.Context, in *UpdateShareRequest, out *UpdateShareResponse) error {
	return h.ShareServiceHandler.UpdateShare(ctx, in, out)
}

func (h *shareServiceHandler) CancelShare(ctx context.Context, in *CancelShareRequest, out *CancelShareResponse) error {
	return h.ShareServiceHandler.CancelShare(ctx, in, out)
}

func (h *shareServiceHandler) RemoveShareEntry(ctx context.Context, in *RemoveShareEntryRequest, out *RemoveShareEntryResponse) error {
	return h.ShareServiceHandler.RemoveShareEntry(ctx, in, out)
}
