// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/auth/auth.proto

package fullbottle_srv_auth

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for AuthService service

type AuthService interface {
	GenerateJwtToken(ctx context.Context, in *GenerateJwtTokenRequest, opts ...client.CallOption) (*GenerateJwtTokenResponse, error)
	ParseJwtToken(ctx context.Context, in *ParseJwtTokenRequest, opts ...client.CallOption) (*ParseJwtTokenResponse, error)
	CheckFolderAccess(ctx context.Context, in *CheckFolderAccessRequest, opts ...client.CallOption) (*CheckFolderAccessResponse, error)
}

type authService struct {
	c    client.Client
	name string
}

func NewAuthService(name string, c client.Client) AuthService {
	return &authService{
		c:    c,
		name: name,
	}
}

func (c *authService) GenerateJwtToken(ctx context.Context, in *GenerateJwtTokenRequest, opts ...client.CallOption) (*GenerateJwtTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.GenerateJwtToken", in)
	out := new(GenerateJwtTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) ParseJwtToken(ctx context.Context, in *ParseJwtTokenRequest, opts ...client.CallOption) (*ParseJwtTokenResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.ParseJwtToken", in)
	out := new(ParseJwtTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authService) CheckFolderAccess(ctx context.Context, in *CheckFolderAccessRequest, opts ...client.CallOption) (*CheckFolderAccessResponse, error) {
	req := c.c.NewRequest(c.name, "AuthService.CheckFolderAccess", in)
	out := new(CheckFolderAccessResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AuthService service

type AuthServiceHandler interface {
	GenerateJwtToken(context.Context, *GenerateJwtTokenRequest, *GenerateJwtTokenResponse) error
	ParseJwtToken(context.Context, *ParseJwtTokenRequest, *ParseJwtTokenResponse) error
	CheckFolderAccess(context.Context, *CheckFolderAccessRequest, *CheckFolderAccessResponse) error
}

func RegisterAuthServiceHandler(s server.Server, hdlr AuthServiceHandler, opts ...server.HandlerOption) error {
	type authService interface {
		GenerateJwtToken(ctx context.Context, in *GenerateJwtTokenRequest, out *GenerateJwtTokenResponse) error
		ParseJwtToken(ctx context.Context, in *ParseJwtTokenRequest, out *ParseJwtTokenResponse) error
		CheckFolderAccess(ctx context.Context, in *CheckFolderAccessRequest, out *CheckFolderAccessResponse) error
	}
	type AuthService struct {
		authService
	}
	h := &authServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&AuthService{h}, opts...))
}

type authServiceHandler struct {
	AuthServiceHandler
}

func (h *authServiceHandler) GenerateJwtToken(ctx context.Context, in *GenerateJwtTokenRequest, out *GenerateJwtTokenResponse) error {
	return h.AuthServiceHandler.GenerateJwtToken(ctx, in, out)
}

func (h *authServiceHandler) ParseJwtToken(ctx context.Context, in *ParseJwtTokenRequest, out *ParseJwtTokenResponse) error {
	return h.AuthServiceHandler.ParseJwtToken(ctx, in, out)
}

func (h *authServiceHandler) CheckFolderAccess(ctx context.Context, in *CheckFolderAccessRequest, out *CheckFolderAccessResponse) error {
	return h.AuthServiceHandler.CheckFolderAccess(ctx, in, out)
}
