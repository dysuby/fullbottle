// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/upload/upload.proto

package fullbottle_srv_upload

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Upload service

type UploadService interface {
	GenerateUploadToken(ctx context.Context, in *GenerateUploadTokenRequest, opts ...client.CallOption) (*GenerateUploadTokenResponse, error)
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...client.CallOption) (*UploadFileResponse, error)
	GetFileUploadedChunks(ctx context.Context, in *GetFileUploadedChunksRequest, opts ...client.CallOption) (*GetFileUploadedChunksResponse, error)
	CancelFileUpload(ctx context.Context, in *CancelFileUploadRequest, opts ...client.CallOption) (*CancelFileUploadResponse, error)
}

type uploadService struct {
	c    client.Client
	name string
}

func NewUploadService(name string, c client.Client) UploadService {
	return &uploadService{
		c:    c,
		name: name,
	}
}

func (c *uploadService) GenerateUploadToken(ctx context.Context, in *GenerateUploadTokenRequest, opts ...client.CallOption) (*GenerateUploadTokenResponse, error) {
	req := c.c.NewRequest(c.name, "Upload.GenerateUploadToken", in)
	out := new(GenerateUploadTokenResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadService) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...client.CallOption) (*UploadFileResponse, error) {
	req := c.c.NewRequest(c.name, "Upload.UploadFile", in)
	out := new(UploadFileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadService) GetFileUploadedChunks(ctx context.Context, in *GetFileUploadedChunksRequest, opts ...client.CallOption) (*GetFileUploadedChunksResponse, error) {
	req := c.c.NewRequest(c.name, "Upload.GetFileUploadedChunks", in)
	out := new(GetFileUploadedChunksResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadService) CancelFileUpload(ctx context.Context, in *CancelFileUploadRequest, opts ...client.CallOption) (*CancelFileUploadResponse, error) {
	req := c.c.NewRequest(c.name, "Upload.CancelFileUpload", in)
	out := new(CancelFileUploadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Upload service

type UploadHandler interface {
	GenerateUploadToken(context.Context, *GenerateUploadTokenRequest, *GenerateUploadTokenResponse) error
	UploadFile(context.Context, *UploadFileRequest, *UploadFileResponse) error
	GetFileUploadedChunks(context.Context, *GetFileUploadedChunksRequest, *GetFileUploadedChunksResponse) error
	CancelFileUpload(context.Context, *CancelFileUploadRequest, *CancelFileUploadResponse) error
}

func RegisterUploadHandler(s server.Server, hdlr UploadHandler, opts ...server.HandlerOption) error {
	type upload interface {
		GenerateUploadToken(ctx context.Context, in *GenerateUploadTokenRequest, out *GenerateUploadTokenResponse) error
		UploadFile(ctx context.Context, in *UploadFileRequest, out *UploadFileResponse) error
		GetFileUploadedChunks(ctx context.Context, in *GetFileUploadedChunksRequest, out *GetFileUploadedChunksResponse) error
		CancelFileUpload(ctx context.Context, in *CancelFileUploadRequest, out *CancelFileUploadResponse) error
	}
	type Upload struct {
		upload
	}
	h := &uploadHandler{hdlr}
	return s.Handle(s.NewHandler(&Upload{h}, opts...))
}

type uploadHandler struct {
	UploadHandler
}

func (h *uploadHandler) GenerateUploadToken(ctx context.Context, in *GenerateUploadTokenRequest, out *GenerateUploadTokenResponse) error {
	return h.UploadHandler.GenerateUploadToken(ctx, in, out)
}

func (h *uploadHandler) UploadFile(ctx context.Context, in *UploadFileRequest, out *UploadFileResponse) error {
	return h.UploadHandler.UploadFile(ctx, in, out)
}

func (h *uploadHandler) GetFileUploadedChunks(ctx context.Context, in *GetFileUploadedChunksRequest, out *GetFileUploadedChunksResponse) error {
	return h.UploadHandler.GetFileUploadedChunks(ctx, in, out)
}

func (h *uploadHandler) CancelFileUpload(ctx context.Context, in *CancelFileUploadRequest, out *CancelFileUploadResponse) error {
	return h.UploadHandler.CancelFileUpload(ctx, in, out)
}
